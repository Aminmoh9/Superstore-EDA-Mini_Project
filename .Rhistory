#Checking for duplicates
duplicates <- super_store[duplicated(super_store), ]
super_store <- super_store[!duplicated(super_store), ]
sum(duplicated(super_store))
# Checking Order ID for duplicates
duplicate_orders <- super_store %>%
filter(duplicated(Order.ID) | duplicated(Order.ID, fromLast = TRUE))
head(duplicate_orders)
#Random checking of Order IDs to validate if they represent distinct products
#View(super_store[super_store$Order.ID == "CA-2016-126004", ])
# Converting 'Order Date' to Date format as well as 'Ship.Date
super_store$Order.Date <- as.Date(super_store$Order.Date, format="%m/%d/%Y")
super_store$Ship.Date <- as.Date(super_store$Ship.Date, format="%m/%d/%Y")
# Extracting Year and Month
super_store <- super_store %>%
mutate(Year = year(Order.Date),
Month = month(Order.Date, label = TRUE, abbr = TRUE))
head(super_store)
# Aggregating sales by Year and Month
monthly_sales <- super_store %>%
group_by(Year, Month) %>%
summarise(Total_Sales = sum(Sales), .groups = "drop")
print(monthly_sales)
# Visualizing sales trend over time
ggplot(monthly_sales, aes(x = Month, y = Total_Sales, group = Year, color = as.factor(Year))) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(title = "Monthly Sales Trends Over the Years",
x = "Month",
y = "Total Sales",
color = "Year") +
theme_minimal() +
theme(plot.title = element_text(hjust= 0.5))
# Calculating Year-over-Year (YOY) Growth Rate
yearly_sales <- super_store %>%
group_by(Year) %>%
summarise(Total_Sales = sum(Sales)) %>%
arrange(Year) %>%
mutate(Previous_Year_Sales = lag(Total_Sales),
YOY_Growth_Rate = ((Total_Sales - Previous_Year_Sales) / Previous_Year_Sales) * 100)
print(yearly_sales)
#Identifying max total sales and max growth rate
max_sales <- max(yearly_sales$Total_Sales, na.rm = TRUE)
max_growth_rate <- max(yearly_sales$YOY_Growth_Rate, na.rm = TRUE)
#Visualizing the YOY Growth Rate
ggplot(yearly_sales, aes(x = factor(Year))) +
geom_bar(aes(y = Total_Sales), stat = "identity", fill = "steelblue", alpha = 0.7) +
geom_line(aes(y = YOY_Growth_Rate * max_sales / max_growth_rate, group = 1), color = "red", size = 1.2) +
geom_point(aes(y = YOY_Growth_Rate * max_sales / max_growth_rate), color = "red", size = 3) +
scale_y_continuous(
name = "Total Sales",
sec.axis = sec_axis(~ . * max_growth_rate / max_sales, name = "YOY Growth Rate (%)"),
labels = comma) +
labs(title = "Yearly Sales and YOY Growth Rate",
x = "Year",
y = "Total Sales") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Calculating profit margins by category
category_profit_margin <- super_store %>%
group_by(Category) %>%
summarise(Total_Profit= sum(Profit), Total_Sales= sum(Sales)) %>%
mutate(Profit_Margin = (Total_Profit / Total_Sales) * 100) %>%
arrange(desc(Profit_Margin))
category_profit_margin
#Visualizing the Profit Margin by category
ggplot(category_profit_margin, aes(x = reorder(Category, Profit_Margin), y = Profit_Margin, fill = Category)) +
geom_bar(stat = "identity" , color='black') +
labs(title = "Profit Margin by Category", x = "Category", y = "Profit Margin (%)") +
theme_minimal() +
theme(plot.title= element_text(hjust= 0.5))
## Identifying the top and bottom categories
top_category <- category_profit_margin %>%
filter(Profit_Margin == max(Profit_Margin))
bottom_category <- category_profit_margin %>%
filter(Profit_Margin == min(Profit_Margin))
# Calculating the margin difference
margin_difference <- top_category$Profit_Margin - bottom_category$Profit_Margin
#Difference
cat("The profit margin difference between the top and bottom categories is:","\n", margin_difference,"%")
# Identifying regions
region_performance <- super_store %>%
group_by(Region) %>%
summarise(
Total_Sales= sum(Sales),
Total_Profit= sum(Profit),
Profit_Margin=  (sum(Profit) / sum(Sales)) * 100
) %>%
arrange(desc(Profit_Margin))
region_performance
# Checking the correlation between high sales and high profits
correlation_value <- cor(region_performance$Total_Sales, region_performance$Total_Profit)
cat("The correlation between Total Sales and Total Profit is (", correlation_value,
") which indicates a strong positive correlation.\n")
# Calculating the Recency
last_purchase_date <- max (super_store$Order.Date)
super_store_summary <- super_store %>%
group_by(Customer.ID) %>%
summarise(
Recency= as.numeric(difftime(last_purchase_date, max(Order.Date), units= "days")),
Frequency = n(),
Monetary = sum(Sales)
)
super_store <- super_store %>%
left_join(super_store_summary, by = "Customer.ID")
# Assigning RFM Scores, we can assign scores (e.g., 1-5) for each of them based on quantiles
super_store <- super_store %>%
mutate(
Recency_Score= ntile(Recency, 5) ,
Frequency_Score = ntile(Frequency, 5),
Monetary_Score = ntile (Monetary, 5)
)
#Calculating RFM segment
super_store <- super_store %>%
mutate(
RFM_Score = Recency_Score + Frequency_Score + Monetary_Score
)
#Defining RFM segments
super_store <- super_store %>%
mutate(
Customer_Segment = case_when(
RFM_Score == 15 ~ "VIP Customers",
RFM_Score >= 12 ~ "High Spenders",
RFM_Score >= 9 ~ "Loyal Customers",
RFM_Score >= 6 ~ "At Risk Customers",
TRUE ~ "Inactive Customers"
)
)
# Calculating the percentage of customers in each customer segment
customer_segment_percentage <- super_store %>%
group_by(Customer_Segment) %>%
summarise(Count= n()) %>%
mutate(Percentage= Count / sum(Count) *100) %>%
arrange(desc(Percentage))
print(customer_segment_percentage)
#Visualizing the Customer segment distribution by percentage
ggplot(customer_segment_percentage, aes(x = Customer_Segment, y = Percentage, fill = Customer_Segment)) +
geom_bar(stat = "identity", color='black') +
geom_text(aes(label = round(Percentage, 2)), vjust = -0.08, size = 4) +
labs(
title = "Customer Segment Distribution",
x = "Customer Segment",
y = "Percentage (%)",
fill = "Customer Segment"
) +
theme_minimal() +
theme(plot.title = element_text(hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Identifying which customer segment generates the most revenue
revenue_by_segment <- super_store %>%
group_by(Customer_Segment) %>%
summarise( Total_Revenue = sum(Monetary)) %>%
arrange(desc(Total_Revenue))
print(revenue_by_segment)
#Visualizing Total Revenue by Customer Segment
ggplot(revenue_by_segment, aes(x = reorder(Customer_Segment, Total_Revenue), y = Total_Revenue, fill = Customer_Segment)) +
geom_bar(stat = "identity", color='black') +
labs(
title = "Total Revenue by Customer Segment",
x = "Customer Segment",
y = "Total Revenue",
fill = "Customer Segment"
) +
theme_minimal() +
scale_y_continuous(label=comma)+
theme(plot.title=element_text(hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Develop Marketing and retention  strategies for all customer segments
# Strategy for VIP Customers (Segment: VIP Customers)
vip_customers <- super_store %>%
filter(Customer_Segment == "VIP Customers")
cat("Marketing strategies for 'VIP Customers': Provide exceptional service, VIP events, and exclusive deals to maintain and enhance their loyalty.\n\n")
# Strategy for High Spenders (Segment: High Spenders)
high_spenders <- super_store %>%
filter(Customer_Segment == "High Spenders")
cat("Marketing strategies for 'High Spenders': Offer VIP access, personalized deals, and loyalty rewards to keep them engaged and increase their spending.\n\n")
# Strategy for Loyal Customers (Segment: Loyal Customers)
loyal_customers <- super_store %>%
filter(Customer_Segment == "Loyal Customers")
cat("Retention strategies for 'Loyal Customers': Reward loyalty through special offers, exclusive promotions, and early access to new products.\n\n")
# Strategy for At-Risk Customers (Segment: At-Risk Customers)
at_risk_customers <- super_store %>%
filter(Customer_Segment == "At Risk Customers")
cat("Retention strategies for 'At-Risk Customers': Offer re-engagement campaigns, exclusive discounts, and personalized offers to bring them back.\n\n")
# Strategy for Inactive Customers (Segment: Inactive Customers)
low_value_customers <- super_store %>%
filter(Customer_Segment == "Inactive Customers")
cat("Retention strategies for 'Inactive Customers': Re-engage them with targeted campaigns and incentives to spark interest.\n")
#Comparing profit margins across shipping modes
profit_margin_by_shipping_mode <- super_store %>%
group_by(Ship.Mode) %>%
summarise(
Total_Profit= sum(Profit),
Total_Sales = sum(Sales),
Profit_Margin= (Total_Profit / Total_Sales) *100) %>%
arrange(desc(Profit_Margin))
print(profit_margin_by_shipping_mode)
# Visualizing profit margins by shipping mode
ggplot(profit_margin_by_shipping_mode, aes(x = reorder(Ship.Mode, Profit_Margin), y = Profit_Margin, fill = Ship.Mode)) +
geom_bar(stat = "identity" , color='black') +
geom_text(aes(label = round(Profit_Margin, 2)), vjust = -0.3, size = 4) +
labs(
title = "Profit Margin by Shipping Mode",
x = "Shipping Mode",
y = "Profit Margin (%)"
) +
theme_minimal() +
theme(plot.title=element_text(hjust=0.5)) +
scale_fill_brewer(palette = "Set2")
# Calculating profit per order for each shipping mode
profit_per_order_by_shipping_mode <- super_store %>%
group_by(Ship.Mode) %>%
summarise(
Total_Profit = sum(Profit),
Total_Orders = n(),
Profit_Per_Order = Total_Profit / Total_Orders
) %>%
arrange(desc(Profit_Per_Order))
print(profit_per_order_by_shipping_mode)
#Visualizing  profit per Order by shipping mode
ggplot(profit_per_order_by_shipping_mode, aes(x = reorder(Ship.Mode, Profit_Per_Order), y = Profit_Per_Order, fill = Ship.Mode)) +
geom_bar(stat = "identity", color='black') +
geom_text(aes(label = round(Profit_Per_Order, 2)), vjust = -0.3, size = 4) +
labs(
title = "Profit per Order by Shipping Mode",
x = "Shipping Mode",
y = "Profit per Order"
) +
theme_minimal() +
theme(plot.title=element_text(hjust=0.5)) +
scale_fill_brewer(palette = "Set2")
cat("** Optimal Shipping Strategy **:\n\n",
"1. Prioritize First Class for High-Value Orders – Highest profit margin (13.93%) and profit per order (€31.84). Promote for premium customers.\n\n",
"2. Encourage Second Class & Same Day for Mid-Value Orders – Good profit margins (~12.4%) and profit per order (~€29.5). Offer as a balance between cost & speed.\n\n",
"3. Optimize Standard Class for Cost-Sensitive Orders – Highest total profit but lowest margin (12.08%). Reduce logistics costs to maintain profitability.\n\n",
"Strategy: Use First Class for premium orders, Second/Same Day for mid-tier, and optimize Standard Class for budget customers."
)
colnames(super_store)
View(at_risk_customers)
#Preparation for EDA
library(tidyverse)
library(lubridate)
library(scales)
#Load the superstore dataset
super_store <- read.csv("Sample - Superstore.csv")
head(super_store)
str(super_store)
summary(super_store)
#Checking for missing values
colSums(is.na(super_store))
#Checking for duplicates
duplicates <- super_store[duplicated(super_store), ]
super_store <- super_store[!duplicated(super_store), ]
sum(duplicated(super_store))
# Checking Order ID for duplicates
duplicate_orders <- super_store %>%
filter(duplicated(Order.ID) | duplicated(Order.ID, fromLast = TRUE))
head(duplicate_orders)
#Random checking of Order IDs to validate if they represent distinct products
#View(super_store[super_store$Order.ID == "CA-2016-126004", ])
# Converting 'Order Date' to Date format as well as 'Ship.Date
super_store$Order.Date <- as.Date(super_store$Order.Date, format="%m/%d/%Y")
super_store$Ship.Date <- as.Date(super_store$Ship.Date, format="%m/%d/%Y")
# Extracting Year and Month
super_store <- super_store %>%
mutate(Year = year(Order.Date),
Month = month(Order.Date, label = TRUE, abbr = TRUE))
head(super_store)
# Aggregating sales by Year and Month
monthly_sales <- super_store %>%
group_by(Year, Month) %>%
summarise(Total_Sales = sum(Sales), .groups = "drop")
print(monthly_sales)
# Visualizing sales trend over time
ggplot(monthly_sales, aes(x = Month, y = Total_Sales, group = Year, color = as.factor(Year))) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(title = "Monthly Sales Trends Over the Years",
x = "Month",
y = "Total Sales",
color = "Year") +
theme_minimal() +
theme(plot.title = element_text(hjust= 0.5))
# Calculating Year-over-Year (YOY) Growth Rate
yearly_sales <- super_store %>%
group_by(Year) %>%
summarise(Total_Sales = sum(Sales)) %>%
arrange(Year) %>%
mutate(Previous_Year_Sales = lag(Total_Sales),
YOY_Growth_Rate = ((Total_Sales - Previous_Year_Sales) / Previous_Year_Sales) * 100)
print(yearly_sales)
#Identifying max total sales and max growth rate
max_sales <- max(yearly_sales$Total_Sales, na.rm = TRUE)
max_growth_rate <- max(yearly_sales$YOY_Growth_Rate, na.rm = TRUE)
#Visualizing the YOY Growth Rate
ggplot(yearly_sales, aes(x = factor(Year))) +
geom_bar(aes(y = Total_Sales), stat = "identity", fill = "steelblue", alpha = 0.7) +
geom_line(aes(y = YOY_Growth_Rate * max_sales / max_growth_rate, group = 1), color = "red", size = 1.2) +
geom_point(aes(y = YOY_Growth_Rate * max_sales / max_growth_rate), color = "red", size = 3) +
scale_y_continuous(
name = "Total Sales",
sec.axis = sec_axis(~ . * max_growth_rate / max_sales, name = "YOY Growth Rate (%)"),
labels = comma) +
labs(title = "Yearly Sales and YOY Growth Rate",
x = "Year",
y = "Total Sales") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Calculating profit margins by category
category_profit_margin <- super_store %>%
group_by(Category) %>%
summarise(Total_Profit= sum(Profit), Total_Sales= sum(Sales)) %>%
mutate(Profit_Margin = (Total_Profit / Total_Sales) * 100) %>%
arrange(desc(Profit_Margin))
category_profit_margin
#Visualizing the Profit Margin by category
ggplot(category_profit_margin, aes(x = reorder(Category, Profit_Margin), y = Profit_Margin, fill = Category)) +
geom_bar(stat = "identity" , color='black') +
labs(title = "Profit Margin by Category", x = "Category", y = "Profit Margin (%)") +
theme_minimal() +
theme(plot.title= element_text(hjust= 0.5))
## Identifying the top and bottom categories
top_category <- category_profit_margin %>%
filter(Profit_Margin == max(Profit_Margin))
bottom_category <- category_profit_margin %>%
filter(Profit_Margin == min(Profit_Margin))
# Calculating the margin difference
margin_difference <- top_category$Profit_Margin - bottom_category$Profit_Margin
#Difference
cat("The profit margin difference between the top and bottom categories is:","\n", margin_difference,"%")
# Identifying regions
region_performance <- super_store %>%
group_by(Region) %>%
summarise(
Total_Sales= sum(Sales),
Total_Profit= sum(Profit),
Profit_Margin=  (sum(Profit) / sum(Sales)) * 100
) %>%
arrange(desc(Profit_Margin))
region_performance
# Checking the correlation between high sales and high profits
correlation_value <- cor(region_performance$Total_Sales, region_performance$Total_Profit)
cat("The correlation between Total Sales and Total Profit is (", correlation_value,
") which indicates a strong positive correlation.\n")
# Calculating the Recency
last_purchase_date <- max (super_store$Order.Date)
super_store_summary <- super_store %>%
group_by(Customer.ID) %>%
summarise(
Recency= as.numeric(difftime(last_purchase_date, max(Order.Date), units= "days")),
Frequency = n(),
Monetary = sum(Sales)
)
super_store <- super_store %>%
left_join(super_store_summary, by = "Customer.ID")
# Assigning RFM Scores, we can assign scores (e.g., 1-5) for each of them based on quantiles
super_store <- super_store %>%
mutate(
Recency_Score= ntile(Recency, 5) ,
Frequency_Score = ntile(Frequency, 5),
Monetary_Score = ntile (Monetary, 5)
)
#Calculating RFM segment
super_store <- super_store %>%
mutate(
RFM_Score = Recency_Score + Frequency_Score + Monetary_Score
)
#Defining RFM segments
super_store <- super_store %>%
mutate(
Customer_Segment = case_when(
RFM_Score == 15 ~ "VIP Customers",
RFM_Score >= 12 ~ "High Spenders",
RFM_Score >= 9 ~ "Loyal Customers",
RFM_Score >= 6 ~ "At Risk Customers",
TRUE ~ "Inactive Customers"
)
)
# Calculating the percentage of customers in each customer segment
customer_segment_percentage <- super_store %>%
group_by(Customer_Segment) %>%
summarise(Count= n()) %>%
mutate(Percentage= Count / sum(Count) *100) %>%
arrange(desc(Percentage))
print(customer_segment_percentage)
#Visualizing the Customer segment distribution by percentage
ggplot(customer_segment_percentage, aes(x = Customer_Segment, y = Percentage, fill = Customer_Segment)) +
geom_bar(stat = "identity", color='black') +
geom_text(aes(label = round(Percentage, 2)), vjust = -0.08, size = 4) +
labs(
title = "Customer Segment Distribution",
x = "Customer Segment",
y = "Percentage (%)",
fill = "Customer Segment"
) +
theme_minimal() +
theme(plot.title = element_text(hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Identifying which customer segment generates the most revenue
revenue_by_segment <- super_store %>%
group_by(Customer_Segment) %>%
summarise( Total_Revenue = sum(Monetary)) %>%
arrange(desc(Total_Revenue))
print(revenue_by_segment)
#Visualizing Total Revenue by Customer Segment
ggplot(revenue_by_segment, aes(x = reorder(Customer_Segment, Total_Revenue), y = Total_Revenue, fill = Customer_Segment)) +
geom_bar(stat = "identity", color='black') +
labs(
title = "Total Revenue by Customer Segment",
x = "Customer Segment",
y = "Total Revenue",
fill = "Customer Segment"
) +
theme_minimal() +
scale_y_continuous(label=comma)+
theme(plot.title=element_text(hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Develop Marketing and retention  strategies for all customer segments
# Strategy for VIP Customers (Segment: VIP Customers)
vip_customers <- super_store %>%
filter(Customer_Segment == "VIP Customers")
cat("Marketing strategies for 'VIP Customers': Provide exceptional service, VIP events, and exclusive deals to maintain and enhance their loyalty.\n\n")
# Strategy for High Spenders (Segment: High Spenders)
high_spenders <- super_store %>%
filter(Customer_Segment == "High Spenders")
cat("Marketing strategies for 'High Spenders': Offer VIP access, personalized deals, and loyalty rewards to keep them engaged and increase their spending.\n\n")
# Strategy for Loyal Customers (Segment: Loyal Customers)
loyal_customers <- super_store %>%
filter(Customer_Segment == "Loyal Customers")
cat("Retention strategies for 'Loyal Customers': Reward loyalty through special offers, exclusive promotions, and early access to new products.\n\n")
# Strategy for At-Risk Customers (Segment: At-Risk Customers)
at_risk_customers <- super_store %>%
filter(Customer_Segment == "At Risk Customers")
cat("Retention strategies for 'At-Risk Customers': Offer re-engagement campaigns, exclusive discounts, and personalized offers to bring them back.\n\n")
# Strategy for Inactive Customers (Segment: Inactive Customers)
low_value_customers <- super_store %>%
filter(Customer_Segment == "Inactive Customers")
cat("Retention strategies for 'Inactive Customers': Re-engage them with targeted campaigns and incentives to spark interest.\n")
#Comparing profit margins across shipping modes
profit_margin_by_shipping_mode <- super_store %>%
group_by(Ship.Mode) %>%
summarise(
Total_Profit= sum(Profit),
Total_Sales = sum(Sales),
Profit_Margin= (Total_Profit / Total_Sales) *100) %>%
arrange(desc(Profit_Margin))
print(profit_margin_by_shipping_mode)
# Visualizing profit margins by shipping mode
ggplot(profit_margin_by_shipping_mode, aes(x = reorder(Ship.Mode, Profit_Margin), y = Profit_Margin, fill = Ship.Mode)) +
geom_bar(stat = "identity" , color='black') +
geom_text(aes(label = round(Profit_Margin, 2)), vjust = -0.3, size = 4) +
labs(
title = "Profit Margin by Shipping Mode",
x = "Shipping Mode",
y = "Profit Margin (%)"
) +
theme_minimal() +
theme(plot.title=element_text(hjust=0.5)) +
scale_fill_brewer(palette = "Set2")
# Calculating profit per order for each shipping mode
profit_per_order_by_shipping_mode <- super_store %>%
group_by(Ship.Mode) %>%
summarise(
Total_Profit = sum(Profit),
Total_Orders = n(),
Profit_Per_Order = Total_Profit / Total_Orders
) %>%
arrange(desc(Profit_Per_Order))
print(profit_per_order_by_shipping_mode)
#Visualizing  profit per Order by shipping mode
ggplot(profit_per_order_by_shipping_mode, aes(x = reorder(Ship.Mode, Profit_Per_Order), y = Profit_Per_Order, fill = Ship.Mode)) +
geom_bar(stat = "identity", color='black') +
geom_text(aes(label = round(Profit_Per_Order, 2)), vjust = -0.3, size = 4) +
labs(
title = "Profit per Order by Shipping Mode",
x = "Shipping Mode",
y = "Profit per Order"
) +
theme_minimal() +
theme(plot.title=element_text(hjust=0.5)) +
scale_fill_brewer(palette = "Set2")
cat("** Optimal Shipping Strategy **:\n\n",
"1. Prioritize First Class for High-Value Orders – Highest profit margin (13.93%) and profit per order (€31.84). Promote for premium customers.\n\n",
"2. Encourage Second Class & Same Day for Mid-Value Orders – Good profit margins (~12.4%) and profit per order (~€29.5). Offer as a balance between cost & speed.\n\n",
"3. Optimize Standard Class for Cost-Sensitive Orders – Highest total profit but lowest margin (12.08%). Reduce logistics costs to maintain profitability.\n\n",
"Strategy: Use First Class for premium orders, Second/Same Day for mid-tier, and optimize Standard Class for budget customers."
)
colnames(super_store)
# Visualizing sales trend over time
ggplot(monthly_sales, aes(x = Month, y = Total_Sales, group = Year, color = as.factor(Year))) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(title = "Monthly Sales Trends Over the Years",
x = "Month",
y = "Total Sales",
color = "Year") +
theme_minimal() +
theme(plot.title = element_text(hjust= 0.5))
#Visualizing the YOY Growth Rate
ggplot(yearly_sales, aes(x = factor(Year))) +
geom_bar(aes(y = Total_Sales), stat = "identity", fill = "steelblue", alpha = 0.7) +
geom_line(aes(y = YOY_Growth_Rate * max_sales / max_growth_rate, group = 1), color = "red", size = 1.2) +
geom_point(aes(y = YOY_Growth_Rate * max_sales / max_growth_rate), color = "red", size = 3) +
scale_y_continuous(
name = "Total Sales",
sec.axis = sec_axis(~ . * max_growth_rate / max_sales, name = "YOY Growth Rate (%)"),
labels = comma) +
labs(title = "Yearly Sales and YOY Growth Rate",
x = "Year",
y = "Total Sales") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
